<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds">
    <springProperty scop="context" name="LOG_LEVEL" source="logging.level.root" defaultValue="INFO"/>
    <springProperty scop="context" name="LOG_FILE_NAME" source="logging.LOG_FILE_NAME" defaultValue="middol-workflow-modeler"/>
    <springProperty scop="context" name="LOG_PATH" source="logging.config.path" defaultValue="logs"/>
    <springProperty scop="context" name="MAX_FILE_SIZE" source="logging.MAX_FILE_SIZE" defaultValue="50MB"/>
    <springProperty scop="context" name="MAX_HISTORY" source="logging.MAX_HISTORY" defaultValue="30"/>

    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />

    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(--){faint} %clr([%5t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- 禁用logback自身日志输出 -->
    <statusListener class="ch.qos.logback.core.status.NopStatusListener" />

    <!-- 控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} L%line - %msg%n</pattern>-->
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 日志记录器, 日期滚动文件 -->
    <appender name="BASE_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <File>${LOG_PATH}/${LOG_FILE_NAME}.log</File>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 归档的日志文件的路径，例如今天是2020-12-21日志，当前写的日志文件路径为file节点指定，
            可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
            而2020-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}-%d{yyyyMMdd}.log.%i</fileNamePattern>
            <!-- 除按日志记录之外，还配置了日志文件不能超过50M，若超过50M，日志文件会以索引0开始，命名日志文件，例如log-error-2020-12-21.0.log -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 如果按天来回滚，则最大保存时间为1天，1天之前的都将被清理掉 -->
            <maxHistory>${MAX_HISTORY}</maxHistory>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} L%line - %msg%n</Pattern>
        </layout>

         <!-- 此日志文件只记录info级别的 -->
        <!--
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        -->
    </appender>

    <!-- 配置成异步写日志文件, logback默认同步打印 -->
    <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="BASE_FILE"/>
        <!-- asyncappender为提高性能，默认关闭打印行号 -->
        <includeCallerData>true</includeCallerData>
    </appender>

    <springProfile name="prod,test">
        <!-- Spring日志级别控制  -->
        <logger name="org.springframework" level="WARN"/>
        <root level="${LOG_LEVEL}">
            <appender-ref ref="ASYNC_FILE"/>
        </root>
    </springProfile>

    <springProfile name="devp">
        <!-- Spring日志级别控制  -->
        <logger name="org.springframework" level="INFO"/>
        <logger name="com.guzt" level="DEBUG"/>
        <root level="${LOG_LEVEL}">
            <appender-ref ref="STDOUT"/>
        </root>
    </springProfile>


</configuration>